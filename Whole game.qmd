---
title: "Whole Game"
author: "R4DS by Moi"
format: html
editor: visual
---

# R4DS expectation

By reading this book \[R4DS\] ([R for Data Science (2e) (hadley.nz)](https://r4ds.hadley.nz/)) , I should learn about

-   Grammar of Graphics (GGplot)

-   Literate programming

-   Reproducible research to save time

-   Manage cognitive resources to facilitate discoveries when *wrangling*, *visualizing* and *exploring* data

## Whole Game in R Logic (Intro)

-   First you must be able to *IMPORT* your data into R. Get it from a locally stored file, database, or web application programme interface (API) and put in a data frame in R

-   Once that is done, we will want to *TIDY* our imported data. This means storing it in a consistent form that matches the semantics of the dataset with how it is stored. Briefly, when data is tidy, each column is a variable and each row is an observation (i.e. the columns contained in each row of data may have different variable measurements belonging to an individual represented in each row). Tidy data is key because the consistent structure allows you focus efforts on answering **Questions** about the data rather than having to fight about getting the data into the right **form** for different functions

-   With **TIDY** data, a common next step is to **TRANSFORM** it. This includes narrowing in on observations of interest (filtering to specific interests e.g. a particular group), creating new variables that are functions of existing variables (mutating old variables and getting new information from old e.g. computing BMI from height and weight), and calculating a set of summary statistics (like counts or means). Together, *tidying* and *transforming* are called ***WRANGLING*** because getting data into a form that's natural to work with often feels like a **FIGHT**!!!

    Once we have tidy data with the variables we need, there are two main engines of knowledge **generation**: **VISUALIZATION** and **MODELLING**. These have complementary strengths and weaknesses, so *any* real data analysis will iterate between them many times.

-   **Visualization** is a fundamental human activity as good visualizations show things we did not expect or raise new questions about the data. Good viz might also hint that we are already asking the wrong question or we need different data to answer the question we want answers to. Vizs can surprise us, but they don't scale well usually because they require *HUMANS* to interpret them

-   **Models** are complementary tools to viz because once we have made our questions sufficiently precise, you can use a model to answer them. Models are fundamentally mathematical or computational tools, so they generally scale well. But every model makes assumptions, and by its very nature, a model cannot question its own assumptions. This means a model cannot fundamentally surprise you.

-   **COMMUNICATION** is the last step of data science but an absolutely critical part of any data analysis project. It doesn't matter how well your models and visualizations have led you to understand the data unless you can also *communicate* your results to others.

-   **Programming** is a cross-cutting tool that we use in nearly every part of a data science project that surrounds all the tools mentioned above. Programming allows us to automate common tasks and solve new problems with greater ease.

-   An R **package**Â is a collection of functions, data, and documentation that extends the capabilities of base R. All packages in the tidyverse share a common philosophy of data and R programming and are designed to work together.

    ## Data Vizualization

ggplot2 implements the **grammar of graphics**, a coherent system for describing and building graphs.

We will learn how to use *aesthetic mappings and geometric objects*, which are the fundamental building blocks of ggplot2. We will look at visualizing distributions of single variables as well as relationships between two or more variables.

```{r}
#| label: Loading the libraries required for the data analysis
# knitr::opts_current$set(warning = FALSE)
library(tidyverse)
require(palmerpenguins) # Contains the penguins dataset and comes with base R
require(ggthemes) # Contains the package that offers a colorblind safe color palette
```

### First steps

We may be curious to know if penguins with longer flippers weigh more or less than penguins with shorter flippers? We may probably have an answer to this but can we try to make our answer very precise. Is there a relationship between flipper length and body mass, if so, what does it look like? Is it a negative relationship( i.e. higher length usually means lower body mass)? Is it a linear relationship or nonlinear? Does the relationship vary by the species of the penguin (e.g. say red penguins have nonlinear relationships whiles other penguins have linear relationships)? Does the island where the penguin live make a difference?

We hope VISUALIZATIONS will help us to attempt to answer these questions. So we load the penguins data frame to have a look at the data of penguins that live on the three islands in the Palmer Archipelago.

A **Data Frame** is a rectangular collection of variables (usually/ideally in columns i.e. for tidy data) and observations (in the rows).

Some terms and terminologies to familiarize ourselves with:

-   A **variable** is a quantity (how much), quality(what kind), or property that we can measure

-   A **value** is the state of a variable when you measure it. (e.g. one possible muchness is 20 pounds)

-   An **observation** is a set of measurements made under similar conditions (you usually make all of the measurements in an observation at the same time {Can be cross sectional data on a group} and on the same object {Can measure the same object over time to get a time series} ). An observation will contain several values each associated with a different variable. We sometimes call an observation a **data point**.

-   **Tabular data** is a set of values, each associated with a variable and an observation. Tabular data is *tidy* if each value is placed in its own "cell", each variable in its own column, and each observation in its own row.

In this context, a variable refers to an attribute of all the penguins that we measured, and an observation refers to all the attributes of a single penguin.

```{r}
#| label: Loading Penguins Data
#| echo: false
palmerpenguins::penguins
```

The `echo: false` option disables the printing of code (only output is displayed).

```{r}
#| label: Alternative view of the data using glimpse
dplyr::glimpse(penguins)

?penguins # this gives us more information on understanding the penguins data
```

### Ultimate Goal

Our ultimate goal is to be able to create a visualization displaying the relationship between flipper lengths and body masses of these penguins, taking into consideration the species types of the penguins

#### Creating a ggplot

With ggplot2, we begin a plot with the function `ggplot()`, defining a plot object that we can then add **layers** to.

The first argument of `ggplot()` is the dataset to use in the graph and when used, this creates an empty graph that is primed to display the `penguins` data, but since we haven't told it how to visualize it yet, for now it's empty.

```{r}
#| label: Creating a plot (i.e. ggplot) object
ggplot2::ggplot(data = palmerpenguins::penguins)
```

Next, we need to tell `ggplot()` how the information from our data will be visually represented.

The **`mappings`** argument of the `ggplot()` function defines how variables in your dataset are mapped to visual properties (**aesthetics**) of your plot. The `mapping` argument is always defined in the `aes()` function, and the `x` and `y` arguments of `aes()` specify which variables to map to the x and y axes. ggplot2 looks for the mapped variables in the `data` argument and uses that.

```{r}
#| label: Adding the aesthetics
ggplot2::ggplot(
  data = palmerpenguins::penguins,
  mapping = aes(x = flipper_length_mm, y = body_mass_g)
)
```

Our empty canvas now has more structure - it's clear where the flipper lengths and body masses will be displayed. But the penguins themselves are not yet on the plot. This is because we have not yet articulated, in our code, how to represent the observations from our data frame on our plot.

To do so, we need to define a **geom**: the geometrical object that a plot uses to represent data. These geometric objects are made available in ggplot2 with functions that start with `geom_`.

We will use the function `geom_point()` to add a layer of points to our plot, which creates a scatterplot.

```{r}
#| label: Adding a layer to our plot (here it is a scatterplot)
#| warning: false # We use warning supress because our data contains NAs
ggplot2::ggplot(
  data = palmerpenguins::penguins,
  mapping = aes(x = flipper_length_mm, y = body_mass_g)
) + # The plus sign must always be placed at the end of the ggplot object
  geom_point()
```

We now have something that looks like what we might think of as a "scatterplot" though this does not match our "ultimate goal" plot, but we can use this plot to start answering some of the questions that motivated our explorations in the beginning.

"What does the relationship between flipper length and body mass look like?" - The relationship appears to be positive (as flipper length increases, so does body mass), it appears fairly linear (the points are clustered around a line instead of a curve), it also appears moderately strong (there isn't too much scatter around such a line). So penguins with longer flippers are generally larger in terms of their body mass (Like we might have guessed in the beginning).

### Adding aesthetics and layers

Scatterplots are useful for displaying the relationship between two numerical variables, but it's always a good idea to be skeptical of any apparent relationship between two variables and ask if there may be other variables that explain or change the nature of this apparent relationship. e.g. like our ultimate goal, we want to know whether this relationship we see in penguins differ when we dive in to investigate the relationship by species of penguins. To do this, we incorporate species into our plot and find out if it reveals any insights.

```{r}
#| label: Using the mapping to plot by groups (here it is species)
#| warning: false
ggplot2::ggplot(
  data = palmerpenguins::penguins,
  mapping = aes(x = flipper_length_mm, y = body_mass_g, color = species)
) + # The plus sign must always be placed at the end of the ggplot object
  geom_point()
```

When a categorical variable is mapped to an aesthetic, ggplot2 will automatically assign a unique value of the aesthetic (here a unique color) to each unique level of the variable (each of the three species), a process known as **scaling**. ggplot2 will also add a legend that explains which values correspond to which levels.

Now we add one more layer: a smooth curve displaying the relationship between body mass and flipper length. This is a new geometric object representing our data, we will add a new geom as a layer on top of our point geom: this geom is called `geom_smooth()`. And we will specify that we want to draw the line of best fit based on a ***l***inear **m**odel with `method = "lm"`.

```{r}
#| label: Adding a trendline to plot
#| warning: false
ggplot2::ggplot(
  data = palmerpenguins::penguins,
  mapping = aes(x = flipper_length_mm, y = body_mass_g, color = species)
) + # The plus sign must always be placed at the end of the ggplot object
  geom_point() + # adds a scatterplot on the plot
  geom_smooth(method = "lm") # This adds a trendline (linear model i.e. lm)
```

We have successfully added lines and we see that the linear trend does occur according the various species but the strength of association differs across the species which we could not have determined. But our ultimate goal is to get one trendline through all the data points instead of separate lines

When aesthetic mappings are defined in `ggplot()`, at the *global* level, they're passed down to each of the subsequent geom layers of the plot. However, each geom function in ggplot2 can also take a `mapping` argument, which allows for aesthetic mappings at the *local* level that are added to those inherited from the global level. Since we want points to be colored based on species but don't want the lines to be separated out for them, we would specify color for the geompoint only.

```{r}
#| label: Separating out the layers
#| warning: false
ggplot2::ggplot(
  data = palmerpenguins::penguins,
  mapping = aes(x = flipper_length_mm, y = body_mass_g)
) + # The plus sign must always be placed at the end of the ggplot object
  geom_point(mapping = aes(color = species)) + # adds a scatterplot on the plot
  geom_smooth(method = "lm") # This adds a trendline (linear model)
```

We can use different shapes for each species of pengiuns and improve labels.

It is generally not a good idea to represent information using only colors on a plot, as people perceive colors differently due to color blindness or other color vision differences. Therefore, in addition to color, we can also map `species` to the `shape` aesthetic.

```{r}
#| label: Adding shape layer
#| warning: FALSE
ggplot2::ggplot(
  data = palmerpenguins::penguins,
  mapping = aes(x = flipper_length_mm, y = body_mass_g)
) + # The plus sign must always be placed at the end of the ggplot object
  geom_point(mapping = aes(color = species, shape = species)) + # adds a scatterplot on the plot
  geom_smooth(method = "lm") # This adds a trendline (linear model)
```

Note that the legend is automatically updated to reflect the different shapes of the points as well.

Voila!! We can now improve the labels of our plots by using the `labs()` function in a new layer to add more descriptions to our plot and then finally improve the color palette to be colorblind safe with the `scale_color_colorblind()` function from the ggthemes package.

```{r}
#| label: Replicating the graph showing relationship between flipper length and body mass of penguins accounting also for species contribution
#| warning: false
#| message: false
ggplot2::ggplot(
  data = palmerpenguins::penguins,
  mapping = aes(x = flipper_length_mm, y = body_mass_g)
) +
  geom_point(aes(color = species, shape = species)) +
  geom_smooth(method = "lm") +
  labs(
    title = "Body mass and flipper length",
    subtitle = "Dimensions for Adelie, Chinstrap, and Gentoo Penguins",
    x = "Flipper length (mm)", y = "Body mass (g)",
    color = "Species", shape = "Species" # Legend label name
  ) +
  ggthemes::scale_color_colorblind()
```

### 2.2.5 Exercise

1.  There are `r nrow(penguins)` rows and `r ncol(penguins)` columns in `penguins`.

2.  `bill_depth_mm` variable describes the depth of the beak of a penguin in millimeters.

3.  The graph below shows the scatterplot between `bill_depth_mm` and `bill_length_mm` .

```{r}
#| label: Question 3
#| warning: false
ggplot(
  data = palmerpenguins::penguins,
  mapping = aes(x = bill_length_mm, y = bill_depth_mm)
) +
  geom_point()#aes(color = species, shape = species)) +
  # geom_smooth(method = "lm") +
  # labs(
  #   title = "Body mass and flipper length",
  #   subtitle = "Dimensions for Adelie, Chinstrap, and Gentoo Penguins",
  #   x = "Flipper length (mm)", y = "Body mass (g)",
  #   color = "Species", shape = "Species"
  # ) +
  # scale_color_colorblind()
```

4.  The graph below is what we get when we plot `species` vs `bill_depth_mm` .

```{r}
#| label: Question 4
#| warning: false
ggplot(
  data = palmerpenguins::penguins,
  mapping = aes(x = bill_depth_mm, y = species)
) +
  geom_point()
```

A better graph would be a bar chart or box plot or dot plot

5.  

```{r}
#| label: Question 5
#| eval: false

ggplot(data = penguins) +
  geom_point()
```

This gives an error because no mappings have been given to allow the geometries to be plotted

6.  `na.rm` argument in `geom_point()` removes all na values in the data.
7.  Adding caption to the graph from question 3 above to get the graph below

```{r}
#| label: Question 7
#| warning: false
ggplot(
  data = palmerpenguins::penguins,
  mapping = aes(x = bill_length_mm, y = bill_depth_mm)
) +
  geom_point() + #aes(color = species, shape = species)) +
  # geom_smooth(method = "lm") +
  labs(
      caption = "Data come from the palmerpenguins package."
  #   title = "Body mass and flipper length",
  #   subtitle = "Dimensions for Adelie, Chinstrap, and Gentoo Penguins",
  #   x = "Flipper length (mm)", y = "Body mass (g)",
  #   color = "Species", shape = "Species"
  )# +
  # scale_color_colorblind()
```

8.  The graph below shows the scatterplot between `flipper_length_mm` and `body_mass_g` .

```{r}
#| label: Question 8
#| warning: false
ggplot2::ggplot(
  data = palmerpenguins::penguins,
  mapping = aes(x = flipper_length_mm, y = body_mass_g)
) +
  geom_point(mapping = aes(color = bill_depth_mm)) +
  geom_smooth(method = 'loess', formula = "y ~ x")
```

9.  The graph below from my estimation will plot different trend lines per island as the global ggplot object has color specified as an aesthetic which groups the data into the various islands

```{r}
#| label: Question 9
#| warning: false
ggplot(
  data = palmerpenguins::penguins,
  mapping = aes(x = flipper_length_mm, y = body_mass_g, color = island)
) +
  geom_point() +
  geom_smooth(se = FALSE)
```

### Visualizing Distributions

How can we understand how a variable behaves? We can visualize the **distribution** of a variable to understand which values of the variable are common. The distribution depends on the type of variable; categorical or numerical.

#### A categorical variable

A variable is **categorical** if it can only take one of a small set of values. Bar charts are a great way to examine the distribution of a categorical variable. The height of the bars displays how many observations occurred with each `x` value. The graph below shows an example of a bar chart

```{r}
ggplot(penguins, aes(x = species)) +
  geom_bar()
```

This is a bar plot of categorical variables with non-ordered levels (this means the possible values of the variable do not indicate any order like small, medium, large) like the penguin `species` above, it is often preferable to reorder the bars based on their frequencies. Doing so requires transforming the variable to a factor (this is how R handles categorical data that we want to possess the order attribute) and then reordering the levels of that factor.

```{r}
ggplot(palmerpenguins::penguins, aes(x = fct_infreq(species))) +
  geom_bar()
```

#### A numerical variable

A variable is **numerical** (or quantitative) if it can take on a wide range of numerical values, and it is sensible to add, subtract, or take averages with those values. Numerical values can be continuous (measurable e.g. weight, height) or discrete (count). One common used visualization for distributions of continuous variables is a histogram.

```{r}
#| label: hist of Penguin body mass
#| warning: false
ggplot(penguins, aes(x = body_mass_g)) +
  geom_histogram(binwidth = 200)
```

A histogram divides the x-axis into **equally spaced bins** and then uses the height of a bar to display the number of observations that fall in each bin. Play with the binwidth to determine the right distribution

An alternative viz for distributions of numerical variables is a density plot. A density plot is a smoothed-out version of a histogram and a practical alternative, particularly for continuous data that comes from an underlying smooth distribution.

```{r}
#| label: Density plot of Penguin Body Mass
#| warning: false
ggplot(penguins, aes(x = body_mass_g)) +
  geom_density()
```

1.  Below is a bar plot of species of penguins

```{r}
#| label: Bar plot of species on y axis
ggplot(penguins, aes(y = species)) +
  geom_bar()
```

2.  The difference between the codes below is that the first colors the outline of the bars red whiles the second colors the bars themselves red

```{r}
#| label: Difference between fill parameter and color parameter
ggplot(penguins, aes(x = species)) +
  geom_bar(color = "red")

ggplot(penguins, aes(x = species)) +
  geom_bar(fill = "red")
```

3.  The `bins` argument in `geom_histogram()` determines the number of bins to use to determine the width intervals
4.  Below are histograms of the `carat` variable from `diamonds` data set using different bin widths

```{r}
#| label: Histogram of Diamond carats
#| warning: false
ggplot(diamonds, aes(x = carat)) +
  geom_histogram(bins = 20)

ggplot(diamonds, aes(x = carat)) +
  geom_histogram(bins = 200)

ggplot(diamonds, aes(x = carat)) +
  geom_histogram(bins = 30)
```

### Visualizing relationships

To visualize a relationship we need to have at least two variables mapped to aesthetics of a plot.

#### A numerical and a categorical variable

To visualize the relationship between a numerical and a categorical variable we can use side-by-side box plots. A **boxplot** is a type of visual shorthand for measures of position (percentiles) that describe a distribution. It is also useful for identifying potential outliers

```{r}
#| label: Boxplots of Penguins body mass according to species
ggplot(penguins, aes(x = species, y = body_mass_g)) +
  geom_boxplot()
```

We can also take a look at the distribution of body mass by species using `geom_density()`

```{r}
ggplot(penguins, aes(x = body_mass_g, color = species)) +
  geom_density(linewidth = 0.75)
```

We can map species to plot groups. alpha set to 0 means fully transparent and 1 means opaque

```{r warning=FALSE}
ggplot(penguins, aes(x = body_mass_g, color = species, fill = species)) +
  geom_density(alpha = 0.5)
```

-   We *map* **variables** to aesthetics if we want the visual attribute represented by that aesthetic e.g. color to vary based on the values of that variable

-   Otherwise, we *set* the value of an aesthetic. This defaults all points to this aesthetic e.g. color = red

#### Two categorical variables

We can use stacked bar plots to visualize the relationship between two categorical variables.

```{r}
penguins %>% 
  group_by(island,species) %>% 
  summarise(n())
```

We can see from the plot below and the table above the frequencies of each species of penguins on each island. We see that there are about equal numbers of Adelies on each island. But we don't have a good sense of the percentage balance within each island.

```{r}
ggplot(penguins, aes(x = island, fill = species)) +
  geom_bar()
```

We can generate a relative frequency plot, created by setting `position = "fill"` in the geom which is more useful for comparing species distribution across islands since it's not affected by the unequal numbers of penguins across the islands. Relatives are more useful measures than absolutes.

```{r}
ggplot(penguins, aes(x = island, fill = species)) +
  geom_bar(position = "fill") # Fill creates the stacked bar by filling all variables on top of each other after rescaling to percentages
```

In creating these bar charts, we map the variable that will be separated into bars to theÂ `x`Â aesthetic, and the variable that will change the colors inside the bars to theÂ `fill`Â aesthetic

#### Two numerical variables

Scatterplots (`geom_point()`) and smooth curves (`geom_smooth()`) for visualizing the relationship between two numerical variables where scatterplots are more commonly used.

```{r}
ggplot(penguins, aes(x = flipper_length_mm, y = body_mass_g)) +
  geom_point()
```

#### Three or more variables

We can incorporate more variables into a plot by mapping them to additional aesthetics. We could create a scatter plot of two numerical variables, then map color to another variable (preferably categorical), then shape to another variable

```{r}
ggplot(penguins, aes(x = flipper_length_mm, y = body_mass_g)) +
  geom_point(aes(color = species, shape = island))
```

However adding too many aesthetic mappings to a plot makes it cluttered and difficult to make sense of. Another way, which is particularly useful for categorical variables, is to split your plot into **facets**, these are subplots that each display one subset of the data.#

To facet your plot by a single variable, use `facet_wrap()`. The first argument of `facet_wrap()` is a formula, which you create with `~` followed by a variable name. The variable should be categorical

```{r}
ggplot(penguins, aes(x = flipper_length_mm, y = body_mass_g)) +
  geom_point(aes(color = species, shape = species)) +
  facet_wrap(~island)
```

Ex 2.5.5

1.  The numerical variables are `displ`, `year`, `cyl,` `cty` and `hwy`. The other variables are categorical

```{r}
?mpg
glimpse(mpg)
```

2.  Scatterplot of highway

```{r}
#| label: Scatterplot
ggplot(mpg, aes(x = hwy, y = displ)) +
  geom_point(aes(color = cyl))

ggplot(mpg, aes(x = hwy, y = displ)) +
  geom_point(aes(size = cyl))

ggplot(mpg, aes(x = hwy, y = displ)) +
  geom_point(aes(color = cyl, size = cyl))
```
